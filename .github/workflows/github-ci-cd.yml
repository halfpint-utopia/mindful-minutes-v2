name: Django CI/CD

on:
  push: # Push the workflow when the code is pushed to the repo
    branches:
      - main # Trigger the workflow for the main branch

# For authentication in GitHub Actions, use GitHub Container Registry (GHCR) to store the Docker image
env:
  IMAGE: ghcr.io/${{ github.repository }}
  USER: app
  TAG: latest
  DJANGO_ALLOWED_HOSTS: .herokuapp.com
  HEROKU_APP_NAME: mindful-minutes

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/${{ github.repository }}
      TAG: latest
      DJANGO_ALLOWED_HOSTS: .herokuapp.com

    steps:
      - name: Checkout codebase # Step to check the codebase in the repo
        uses: actions/checkout@v3 # Uses the official checkout action

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Use Docker Build Cache # Ensure cache is only used when the `Dockerfile` has not changed - utilising Docker build to improve the build speed and efficiency
        uses: actions/cache@v3 # https://github.com/actions/cache caching the Docker build cache directory using a key that includes the OS and has of the `Dockerfile`
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('app/Dockerfile.prod') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Login to GitHub Container Registry # Docker login is now done using GITHUB_TOKEN
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image # Step to pull the latest Docker image if exists
        run: docker pull $IMAGE:$TAG || true

      - name: Build Docker image # Step to build the Docker image https://github.com/docker/build-push-action
        uses: docker/build-push-action@v3
        with:
          context: ./app
          file: app/Dockerfile.prod
          build-args: |
            CLOUD_NAME=${{ secrets.CLOUD_NAME }}
            API_KEY=${{ secrets.API_KEY }}
            API_SECRET=${{ secrets.API_SECRET }}

  test:
    name: Test with pytest, Flake8, Black and isort
    needs: build
    runs-on: ubuntu-latest # Run the job on an Ubuntu environment
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }} # This needs to be set in repo SECRET
    services:
      postgres:
        image: postgres:10.3
        env:
          POSTGRES_DB: api-test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout codebase # Step to check the codebase in the repo
        uses: actions/checkout@v3 # Uses the official checkout action

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create and activate virtual environment
        run: |
          python -m venv app/env
          source app/env/bin/activate
        working-directory: app

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install black==23.3.0 Faker==18.10.1 flake8==6.0.0 freezegun==1.2.2 isort==5.12.0 pytest==7.3.1 pytest-django==4.5.2
        working-directory: app

      - name: Run tests and linting and run Django deployment checklist # Step to run code linting
        run: |
          export DEBUG=1
          pytest -p no:warnings
          flake8 .
          black . --line-length=79 --extend-exclude="migrations|env|venv"
          isort . --check-only --skip env
          export DEBUG=0
          python manage.py check --deploy --fail-level=WARNING
        working-directory: app


  # https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action
  # docker: dind (Docker in Docker) start Docker container with Docker installed - allows for CI/CD to run Docker commands inside the container.
  # DOCKER_DRIVER: overlay2 - specifies the storage driver use for Docker, responsible for managing filesystem and storage aspects of Docker containers and images - also provides good performance and stability.
  # These two settings are not required in GitHub Actions as a different virtualization technology is used.
  # GitHub Actions provides a Docker container environment that is automatically used for running Docker commands
  deploy:
    name: Deploy to production # Step to deploy to production
    needs: test # Dependency on test job
    runs-on: ubuntu-latest # Run the job on an Ubuntu environment

    steps:
      - name: Install cURL
        run: sudo apt-get install -y curl

      - name: Checkout codebase # Step to check the codebase in the repo
        uses: actions/checkout@v3 # Uses the official checkout action

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Login to GitHub Container Registry # Docker login is now done using GITHUB_TOKEN
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag new image
        uses: docker/build-push-action@v3
        with:
          context: ./app
          file: ./app/Dockerfile.prod
          push: false
          tags: ${{ env.IMAGE }}/${{ env.USER }}:${{ env.TAG }}
          build-args: |
            CLOUD_NAME=${{ secrets.CLOUD_NAME }}
            API_KEY=${{ secrets.API_KEY }}
            API_SECRET=${{ secrets.API_SECRET }}

      - name: Login to Heroku Container registry # https://dev.to/heroku/deploying-to-heroku-from-github-actions-29ej
        run: echo ${{ secrets.HEROKU_AUTH_TOKEN }} | docker login --username=_ --password-stdin registry.heroku.com

      - name: Push the image to Heroku Container Registry
        run: docker tag ${{ env.IMAGE }}/${{ env.USER }}:${{ env.TAG }} registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web && docker push registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web

      - name: Execute release.sh
        run: |
          chmod +x release.sh
          ./release.sh

  debug_trace:
    name: Enable Debug Trace
    runs-on: ubuntu-latest
    steps:
      - name: Enable Debug Trace
        run: echo "DEBUG_TRACE=true" >> $GITHUB_ENV
